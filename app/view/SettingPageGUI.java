/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package aagui;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingUtilities;

/**
 *
 * @author owner
 */
public class SettingPageGUI extends javax.swing.JFrame {

   List <String> metricList = new ArrayList();
    /**
     * Creates new form settingPage
     */
    public SettingPageGUI() {
        initComponents();
     AdjectiveFrequency.setSelected(true);
      AdjectiveToNoun.setSelected(true);
      AverageWordLength.setSelected(true);
      CountWords.setSelected(true);
      DistributionOfWordLengths.setSelected(true);
      LetterFrequency.setSelected(true);
      LetterPairFrequency.setSelected(true);
      LexicalDensity.setSelected(true);
      NounFrequency.setSelected(true);
      VerbFrequency.setSelected(true);
      VocabularyRichness.setSelected(true);
      WordFrequency.setSelected(true);
      WordToSentenceRatio.setSelected(true);
      WordsPerSentence.setSelected(true);
      metricList.add("AdjectiveFrequency");
       metricList.add("AdjectiveToNoun");
        metricList.add("AverageWordLength");
         metricList.add("CountWords");
          metricList.add("DistributionOfWordLengths");
           metricList.add("LetterFrequency");
            metricList.add("LetterPairFrequency");
             metricList.add("LexicalDensity");
              metricList.add("NounFrequency");
               metricList.add("VerbFrequency");
                metricList.add("VocabularyRichness");
                 metricList.add("WordFrequency");
                  metricList.add("WordToSentenceRatio");
                   metricList.add("WordsPerSentence");
                    
                       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        AdjectiveFrequency = new javax.swing.JCheckBox();
        Cancel = new javax.swing.JButton();
        applyChanges = new javax.swing.JButton();
        Settinglabel = new javax.swing.JLabel();
        RestoreToDefault = new javax.swing.JButton();
        AdjectiveToNoun = new javax.swing.JCheckBox();
        LexicalDensity = new javax.swing.JCheckBox();
        NounFrequency = new javax.swing.JCheckBox();
        VerbFrequency = new javax.swing.JCheckBox();
        AverageWordLength = new javax.swing.JCheckBox();
        CountWords = new javax.swing.JCheckBox();
        DistributionOfWordLengths = new javax.swing.JCheckBox();
        LetterFrequency = new javax.swing.JCheckBox();
        LetterPairFrequency = new javax.swing.JCheckBox();
        VocabularyRichness = new javax.swing.JCheckBox();
        WordFrequency = new javax.swing.JCheckBox();
        WordToSentenceRatio = new javax.swing.JCheckBox();
        WordsPerSentence = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Metics");

        AdjectiveFrequency.setText("AdjectiveFrequency");
        AdjectiveFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdjectiveFrequencyActionPerformed(evt);
            }
        });

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        applyChanges.setText("Apply Changes");
        applyChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyChangesActionPerformed(evt);
            }
        });

        Settinglabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Settinglabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Settinglabel.setText("Setting");

        RestoreToDefault.setText("Restore to Default ");
        RestoreToDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestoreToDefaultActionPerformed(evt);
            }
        });

        AdjectiveToNoun.setText("AdjectiveToNoun ");

        LexicalDensity.setText("LexicalDensity");

        NounFrequency.setText("NounFrequency");

        VerbFrequency.setText("VerbFrequency ");

        AverageWordLength.setText("AverageWordLength");

        CountWords.setText("CountWords");

        DistributionOfWordLengths.setText("DistributionOfWordLengths");

        LetterFrequency.setText("LetterFrequency");

        LetterPairFrequency.setText("LetterPairFrequency");

        VocabularyRichness.setText("VocabularyRichness");
        VocabularyRichness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VocabularyRichnessActionPerformed(evt);
            }
        });

        WordFrequency.setText("WordFrequency");

        WordToSentenceRatio.setText("WordToSentenceRatio");

        WordsPerSentence.setText("WordsPerSentence");
        WordsPerSentence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WordsPerSentenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AverageWordLength, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CountWords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(155, 155, 155))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(AdjectiveToNoun, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AdjectiveFrequency, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(DistributionOfWordLengths, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                    .addComponent(LetterFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LetterPairFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LexicalDensity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(WordToSentenceRatio)
                                    .addComponent(WordsPerSentence)
                                    .addComponent(WordFrequency)
                                    .addComponent(VocabularyRichness)
                                    .addComponent(VerbFrequency)
                                    .addComponent(NounFrequency))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(RestoreToDefault)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applyChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(Settinglabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Settinglabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AdjectiveFrequency)
                    .addComponent(NounFrequency))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AdjectiveToNoun)
                    .addComponent(VerbFrequency))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AverageWordLength)
                    .addComponent(VocabularyRichness))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CountWords)
                    .addComponent(WordFrequency))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DistributionOfWordLengths)
                    .addComponent(WordToSentenceRatio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LetterFrequency)
                    .addComponent(WordsPerSentence))
                .addGap(3, 3, 3)
                .addComponent(LetterPairFrequency)
                .addGap(4, 4, 4)
                .addComponent(LexicalDensity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyChanges)
                    .addComponent(RestoreToDefault)
                    .addComponent(Cancel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed

      AdjectiveFrequency.setSelected(false);
      AdjectiveToNoun.setSelected(false);
      AverageWordLength.setSelected(false);
      CountWords.setSelected(false);
      DistributionOfWordLengths.setSelected(false);
      LetterFrequency.setSelected(false);
      LetterPairFrequency.setSelected(false);
      LexicalDensity.setSelected(false);
      NounFrequency.setSelected(false);
      VerbFrequency.setSelected(false);
      VocabularyRichness.setSelected(false);
      WordFrequency.setSelected(false);
      WordToSentenceRatio.setSelected(false);
      WordsPerSentence.setSelected(false);
      
      
      for(int i = 0; i > metricList.size(); i++) {        
          if(metricList.get(i).equals("AdjectiveFrequency")){
            AdjectiveFrequency.setSelected(true);
            }
        if(metricList.get(i).equals("AdjectiveToNoun")){
          AdjectiveToNoun.setSelected(true);
    }
       if(metricList.get(i).equals("AverageWordLength")){
            AverageWordLength.setSelected(true);
    }
       if(metricList.get(i).equals("CountWords")){
            CountWords.setSelected(true);
    }
        if(metricList.get(i).equals("DistributionOfWordLengths")){
           DistributionOfWordLengths.setSelected(true);
    } 
  if(metricList.get(i).equals("LetterFrequency")){
            LetterFrequency.setSelected(true);
            }
        if(metricList.get(i).equals("LetterPairFrequency")){
          LetterPairFrequency.setSelected(true);
    }
       if(metricList.get(i).equals("LexicalDensity")){
            LexicalDensity.setSelected(true);
    }
       if(metricList.get(i).equals("NounFrequency")){
            NounFrequency.setSelected(true);
    }
         if(metricList.get(i).equals("VocabularyRichness")){
            VocabularyRichness.setSelected(true);
         }
        if(metricList.get(i).equals("VocabularyRichness")){
           VocabularyRichness.setSelected(true);
    } 
         if(metricList.get(i).equals("WordFrequency")){
            WordFrequency.setSelected(true);
            }
        if(metricList.get(i).equals("WordToSentenceRatio")){
          WordToSentenceRatio.setSelected(true);
    }
       if(metricList.get(i).equals("WordsPerSentence")){
            WordsPerSentence.setSelected(true);
    }        
       }
      setVisible(false);
    }//GEN-LAST:event_CancelActionPerformed

    private void applyChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyChangesActionPerformed
metricList.clear();
if(!(AdjectiveFrequency.isSelected() && AdjectiveToNoun.isSelected() && LexicalDensity.isSelected() 
        && NounFrequency.isSelected() && VerbFrequency.isSelected())){
     ErrorMessage dialog = new ErrorMessage(new javax.swing.JFrame(), true);
    dialog.setLocationRelativeTo(this);
   dialog.setVisible(true);
    
    
}
else{

        if(AdjectiveFrequency.isSelected()){
            metricList.add("AdjectiveFrequency");
    }
        if(AdjectiveToNoun.isSelected()){
           metricList.add("AdjectiveToNoun");
    }
       if(AverageWordLength.isSelected()){
            metricList.add("AverageWordLength");
    }
       if(CountWords.isSelected()){
            metricList.add("CountWords");
    }
        if(DistributionOfWordLengths.isSelected()){
            metricList.add("DistributionOfWordLengths");
    }
             if(LetterFrequency.isSelected()){
            metricList.add("LetterFrequency");
    }
        if(LetterPairFrequency.isSelected()){
           metricList.add("LetterPairFrequency");
    }
       if(LexicalDensity.isSelected()){
            metricList.add("LexicalDensity");
    }
       if(NounFrequency.isSelected()){
            metricList.add("NounFrequency");
    }
        if(VerbFrequency.isSelected()){
            metricList.add("VerbFrequency");
    }
             if(VocabularyRichness.isSelected()){
            metricList.add("VocabularyRichness");
    }
        if(WordFrequency.isSelected()){
           metricList.add("WordFrequency");
    }
       if(WordToSentenceRatio.isSelected()){
            metricList.add("WordToSentenceRatio");
    }
       if(WordsPerSentence.isSelected()){
            metricList.add("WordsPerSentence");
    }
   
        setVisible(false);
    }//GEN-LAST:event_applyChangesActionPerformed
 }
    private void AdjectiveFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdjectiveFrequencyActionPerformed
     
    }//GEN-LAST:event_AdjectiveFrequencyActionPerformed

    private void RestoreToDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestoreToDefaultActionPerformed
      AdjectiveFrequency.setSelected(true);
      AdjectiveToNoun.setSelected(true);
      AverageWordLength.setSelected(true);
      CountWords.setSelected(true);
      DistributionOfWordLengths.setSelected(true);
      LetterFrequency.setSelected(true);
      LetterPairFrequency.setSelected(true);
      LexicalDensity.setSelected(true);
      NounFrequency.setSelected(true);
      VerbFrequency.setSelected(true);
      VocabularyRichness.setSelected(true);
      WordFrequency.setSelected(true);
      WordToSentenceRatio.setSelected(true);
      WordsPerSentence.setSelected(true);
    }//GEN-LAST:event_RestoreToDefaultActionPerformed

    private void WordsPerSentenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WordsPerSentenceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WordsPerSentenceActionPerformed

    private void VocabularyRichnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VocabularyRichnessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VocabularyRichnessActionPerformed
public List metricList(){
    return metricList;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingPageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingPageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingPageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingPageGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingPageGUI().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AdjectiveFrequency;
    private javax.swing.JCheckBox AdjectiveToNoun;
    private javax.swing.JCheckBox AverageWordLength;
    private javax.swing.JButton Cancel;
    private javax.swing.JCheckBox CountWords;
    private javax.swing.JCheckBox DistributionOfWordLengths;
    private javax.swing.JCheckBox LetterFrequency;
    private javax.swing.JCheckBox LetterPairFrequency;
    private javax.swing.JCheckBox LexicalDensity;
    private javax.swing.JCheckBox NounFrequency;
    private javax.swing.JButton RestoreToDefault;
    private javax.swing.JLabel Settinglabel;
    private javax.swing.JCheckBox VerbFrequency;
    private javax.swing.JCheckBox VocabularyRichness;
    private javax.swing.JCheckBox WordFrequency;
    private javax.swing.JCheckBox WordToSentenceRatio;
    private javax.swing.JCheckBox WordsPerSentence;
    private javax.swing.JButton applyChanges;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
